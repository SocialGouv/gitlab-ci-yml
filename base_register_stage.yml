#
# docker image registration
# these base jobs can be reused to build and publish your docker images
#

.base_docker_image_stage:
  image: docker:$DOCKER_VERSION
  services:
    - docker:$DOCKER_VERSION-dind

.base_register_stage:
  stage: "Registration"
  extends: .base_docker_image_stage
  script:
    # NOTE(douglasduteil): use echo "$CI_JOB_TOKEN" to remove docker login warning.
    # `WARNING! Using --password via the CLI is insecure. Use --password-stdin`
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
    - >-
      if [[ -n "${CI_COMMIT_TAG}" ]]; then
        export TAG=$(printf "${CI_COMMIT_TAG}" | sed "s/^v//")
      else
        export TAG=$CI_COMMIT_REF_SLUG
      fi
    #
    # NOTE(douglasduteil): aggressive caching strategy.
    # As we don't know which image is the closest to the one we are registering
    # we pull all the images that can help.
    # From the previous commit, to the current branch or the master branch, the
    # first to be defined will be our cache :)
    - docker pull $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA &&
        export CACHE_TAG=$CI_COMMIT_BEFORE_SHA || true
    - "[[ -n $CACHE_TAG ]] && echo 'Use '$CACHE_TAG' as cache' || docker pull $IMAGE_NAME:$TAG && export CACHE_TAG=$TAG || true"
    - "[[ -n $CACHE_TAG ]] && echo 'Use '$CACHE_TAG' as cache' || docker pull $IMAGE_NAME:master && export CACHE_TAG=master || true"
    #
    - echo "
      docker build
      --cache-from $IMAGE_NAME:$CACHE_TAG
      -t $IMAGE_NAME:$CI_COMMIT_SHA
      -t $IMAGE_NAME:$TAG
      $DOCKER_BUILD_ARGS
      $CONTEXT"
    - docker build
      --cache-from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA
      --cache-from $IMAGE_NAME:$TAG
      --cache-from $IMAGE_NAME:master
      -t $IMAGE_NAME:$CI_COMMIT_SHA
      -t $IMAGE_NAME:$TAG
      $DOCKER_BUILD_ARGS
      $CONTEXT
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:$TAG
