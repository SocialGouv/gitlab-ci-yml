stages:
  - Install
  - Code Quality
  - Registration
  - Deploy
  - Notify Finished Deployment
  - Clean Up

include:
  - /base_create_namespace_stage.yml
  - /base_delete_useless_k8s_ns_stage.yml
  - /base_deploy_nodejs_chart_stage.yml
  - /base_docker_helm_image_stage.yml
  - /base_docker_kubectl_image_stage.yml
  - /base_notify_github_stage.yml
  - /base_register_stage.yml
  - /base_semantic_release_stage.yml
  - /base_yarn_stage.yml

#

Install:
  extends: .base_yarn

Lint:
  extends: .base_yarn_script
  dependencies:
    - Install
  needs:
    - Install
  script:
    - yarn lint

Test:
  extends: .base_yarn_script
  dependencies:
    - Install
  needs:
    - Install
  script:
    - yarn test

Build:
  extends: .base_yarn_build_next
  dependencies:
    - Install
  needs:
    - Install

#

Release:
  extends: .base_semantic_release_stage
  dependencies: []
  stage: Registration

#

Register image:
  extends: .base_register_stage
  stage: Registration
  dependencies:
    - Build
  needs:
    - Build
  variables:
    CONTEXT: .
    IMAGE_NAME: $CI_REGISTRY_IMAGE

#

Create namespace:
  extends: .base_create_namespace_stage
  only:
    refs:
      - branches
  except:
    refs:
      - tags
      - master

#

.deploy_app_stage:
  stage: Deploy
  extends: .base_deploy_nodejs_chart_stage
  image: registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:v0.12.1
  dependencies: []
  before_script:
    #
    - auto-deploy check_kube_domain
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    #
    # NOTE(douglasduteil): ensure to have `envsubst`
    - apk add gettext
  variables:
    REMOTE_URL: "https://github.com/${CI_PROJECT_PATH}.git"
    K8S_NAMESPACE: $KUBE_NAMESPACE
    REGISTRY: $CI_REGISTRY_IMAGE
    IMAGE_TAG: $CI_COMMIT_SHA
    CONTEXT: app

Deploy app (dev):
  extends:
    - .deploy_app_stage
  except:
    refs:
      - tags
      - master
  variables:
    HOST: ${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}
  environment:
    name: review/${CI_COMMIT_REF_NAME}-dev
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}
    on_stop: Stop review

Stop review:
  extends: .base_docker_kubectl_image_stage
  stage: Clean Up
  except:
    refs:
      - tags
      - master
  environment:
    name: review/${CI_COMMIT_REF_NAME}-dev
    action: stop
  when: manual
  allow_failure: true
  dependencies: []
  variables:
    GIT_STRATEGY: none
  script:
    - echo "kubectl delete namespace ${KUBE_NAMESPACE}"
    - kubectl delete namespace "${KUBE_NAMESPACE}"

Deploy app (prod):
  extends:
    - .deploy_app_stage
  only:
    refs:
      - master
  variables:
    HOST: ${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}
    K8S_NAMESPACE: ${CI_PROJECT_NAME}
    PRODUCTION: "true"
  environment:
    name: prod
    url: https://${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}

#

.base_azure_db:
  image: "registry.gitlab.factory.social.gouv.fr/socialgouv/docker/azure-db:0.27.0"
  dependencies: []
  only:
    refs:
      - branches
    variables:
      - $ENABLE_AZURE_POSTGRES
  except:
    refs:
      - master
  variables:
    GIT_STRATEGY: none
    #
    NEW_DB_NAME: db_${CI_COMMIT_SHORT_SHA}
    NEW_USER: user_${CI_COMMIT_SHORT_SHA}@${PGHOST}
    NEW_PASSWORD: pass_${CI_COMMIT_SHORT_SHA}
    DROP_DATABASE: db_${CI_COMMIT_SHORT_SHA}
    DROP_USER: user_${CI_COMMIT_SHORT_SHA}@${PGHOST}
  before_script:
    - \. <(kubectl get secret azure-pg-admin-user -n ${CI_PROJECT_NAME}-secret -o json | export_from_k8s_secret)

Create Azure DB (dev):
  extends:
    - .base_azure_db
  stage: "Deploy"
  allow_failure: true
  environment:
    name: review/${CI_COMMIT_REF_NAME}-dev
  script:
    - export PGUSER="${ADMIN_PG_USER}"
    - export PGPASSWORD="${ADMIN_PG_PASSWORD}"
    - create-db-user

Drop Azure DB (dev):
  extends:
    - .base_azure_db
  stage: "Clean Up"
  when: manual
  allow_failure: true
  environment:
    name: review/${CI_COMMIT_REF_NAME}-dev
    action: stop
  script:
    - export PGUSER="${ADMIN_PG_USER}"
    - export PGPASSWORD="${ADMIN_PG_PASSWORD}"
    - drop-db-user

#

Delete useless k8s namespaces:
  extends: .base_delete_useless_k8s_ns_stage
  variables:
    K8S_NAMESPACE_PREFIX: "${PROJECT}-${CI_PROJECT_ID}-review"

#

Notify Starting Deployment:
  extends: .base_notify_pending_stage
  stage: Deploy

Notify Fail (review):
  extends: .base_notify_fail_stage
  stage: Notify Finished Deployment
  except:
    refs:
      - tags
      - master
  dependencies:
    - Notify Starting Deployment
  environment:
    name: review/${CI_COMMIT_REF_NAME}-dev
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}
  before_script:
    - HOST="https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}"

Notify Success (review):
  extends: .base_notify_success_stage
  stage: Notify Finished Deployment
  except:
    refs:
      - tags
      - master
  dependencies:
    - Notify Starting Deployment
  environment:
    name: review/${CI_COMMIT_REF_NAME}-dev
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}
  before_script:
    - HOST="https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}"

Notify Fail (prod):
  extends: .base_notify_fail_stage
  stage: Notify Finished Deployment
  only:
    refs:
      - master
  dependencies:
    - Notify Starting Deployment
  environment:
    name: prod
    url: https://${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}
  before_script:
    - HOST="https://${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}"

Notify Success (prod):
  extends: .base_notify_success_stage
  stage: Notify Finished Deployment
  only:
    refs:
      - master
  dependencies:
    - Notify Starting Deployment
  environment:
    name: prod
    url: https://${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}
  before_script:
    - HOST="https://${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}"
